services:
  postgres:
    image: postgres:15-alpine
    container_name: esjaythegreat-db
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - esjaythegreat-network

  strapi:
    build: ./backend
    container_name: esjaythegreat-strapi
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "1337:1337"
    volumes:
      - ./backend/src:/opt/app/src
      - ./backend/config:/opt/app/config
      - strapi-uploads:/opt/app/public/uploads
    healthcheck:
      test: ["CMD-SHELL", "node -e \"http=require('http');http.get('http://127.0.0.1:1337/_health',r=>process.exit([200,204].includes(r.statusCode)?0:1)).on('error',()=>process.exit(1))\""]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      APP_ENV: ${APP_ENV:-local}
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      APP_KEYS: ${APP_KEYS}
      EMAIL_PROVIDER: ${EMAIL_PROVIDER}
      EMAIL_API_KEY: ${EMAIL_API_KEY}
      EMAIL_DEFAULT_FROM: ${EMAIL_DEFAULT_FROM}
      EMAIL_DEFAULT_REPLY_TO: ${EMAIL_DEFAULT_REPLY_TO}
    command: >
      sh -c "if [ \"$APP_ENV\" = \"local\" ]; then
        npm run develop;
      else
        npm run build && npm run start;
      fi"
    networks:
      - esjaythegreat-network

  frontend:
    build:
      context: ./frontend
      args:
        APP_ENV: ${APP_ENV:-local}
    container_name: esjaythegreat-frontend
    restart: unless-stopped
    depends_on:
      strapi:
        condition: service_healthy   
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      APP_ENV: ${APP_ENV:-local}
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_STRAPI_API_URL: ${NEXT_PUBLIC_STRAPI_API_URL}
      NEXT_PUBLIC_STRAPI_BROWSER_URL: ${NEXT_PUBLIC_STRAPI_BROWSER_URL}
      NEXT_PUBLIC_SITE_URL: ${NEXT_PUBLIC_SITE_URL}
      NEXT_PUBLIC_SITE_NAME: ${NEXT_PUBLIC_SITE_NAME}
      NEXT_PUBLIC_DOMAIN: ${NEXT_PUBLIC_DOMAIN}
      NEXT_PUBLIC_INSTAGRAM: ${NEXT_PUBLIC_INSTAGRAM}
      NEXT_PUBLIC_YOUTUBE: ${NEXT_PUBLIC_YOUTUBE}
    command: >
      sh -c "if [ \"$APP_ENV\" = \"local\" ]; then
        npm run dev;
      else
        npm run build && npm run start;
      fi"
    networks:
      - esjaythegreat-network

volumes:
  postgres-data:
    name: esjaythegreat_postgres-data
  strapi-uploads:
    name: esjaythegreat_strapi-uploads

networks:
  esjaythegreat-network:
    driver: bridge
